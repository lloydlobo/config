#+TITLE: Install Package
#+AUTHOR: lloydlobo
#+DESCRIPTION: Packages to install based on config dotfiles.
#+STARTUP: fold
-----

* Table of Contents :toc:
- [[#bash-shebang][bash shebang]]
- [[#git-setup][git setup]]
- [[#arch-pacman-yay][Arch pacman yay]]
- [[#fedora-dnf-snapd-setup][Fedora dnf snapd setup]]
- [[#vimneovim][Vim/Neovim]]
- [[#utilities][Utilities]]
- [[#databases][Databases]]
- [[#rust-tools][Rust tools]]
- [[#go-lang][Go lang]]
- [[#lsp][LSP]]
- [[#vs-code][VS Code]]
- [[#browsers][Browsers]]
- [[#fonts][Fonts]]
- [[#shell-terminals-extras][Shell Terminals Extras]]
- [[#node][NODE]]
- [[#yay-extras][YAY Extras]]
- [[#emacs][EMACS]]
- [[#c-libraries][C Libraries]]
  - [[#packages-installed][Packages installed]]
  - [[#sdl2][SDL2]]
- [[#robotgo][robotgo]]
  - [[#fedora][Fedora]]
- [[#formatters][Formatters]]
  - [[#shfmt][shfmt]]
- [[#go-tools-environment][Go Tools Environment]]
  - [[#debugging][Debugging]]
- [[#gnu][GNU]]
  - [[#gnuplot][gnuplot]]
- [[#cheatsheets][cheatsheets]]
  - [[#cheat][cheat]]
  - [[#examples-only][Examples only]]
- [[#docker][Docker]]

* bash shebang
#+NAME: bash shebang
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments no :noweb yes
#!/usr/bin/env bash
#+END_SRC

* git setup
#+NAME: git dotfiles bare repo
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes

#
# GUIDE for instal.sh dotfiles
# =>> https://github.com/bobwhitelock/dotfiles
# put `&` later when creating the final script
#
# Connect to github cli
gh auth login
#
# /config DOTFILES BARE REPO
# Import dotfiles from github for .config
echo ".cfg" >> .gitignore
git clone --bare git@github.com:lloydlobo/config.git $HOME/.cfg/
alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'
config config --local status.showUntrackedFiles no
#

#+END_SRC

* Arch pacman yay
#+NAME: Arch pacman yay
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#
# YAY
#
# Install yay
sudo pacman -S --needed git base-devel
git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si
#
# Setup yay
yay -Y --gendb
yay -Syu devel
yay -Y --devel --save
#
#+END_SRC

* Fedora dnf snapd setup
#+name: fedora dnf snapd setup
#+begin_src shell :tangle install-pkg.sh :main no :comments link :noweb yes
#
# snap
#
#First ensure snapd (package providing support for snap) is installed:
sudo dnf install snapd
#Then create a symbolic link to /var/lib/snapd/snap for /snap:
sudo ln -s /var/lib/snapd/snap /snap
#Then install Postman:
sudo snap install postman

# https://wiki.archlinux.org/title/Dotfiles
# Dotfiles bare config alias
yay bash-complete-alias
# bash-complete-alias dependency is bash-completion --> needed?
yay bash-completion
echo "complete -F _complete_alias config" >> .bashrc

# GHQ git local repo management
yay ghq

#
# RUSTUP | CARGO
#
# Setup rustup cargo & update it
rustup default stable
rustup update
yay rust-analyzer               # Conflicts with rust-analyzer-nightly-bin

#
# i3 - PLUGINS
#
yay autotiling
yay -S i3-resurrect
yay xorg-xbacklight
yay light


##
# MUSIC | MPD | MPV | Media | Codec & Plugins
#
yay vlc
# Prerequisite mpc mpd ncmpcpp
sudo pacman -S timidity
yay ncspot  spicetify-cli spotify spotify-adblock-git spotify-tui

#+end_src

#+begin_example
null-ls: require("null-ls.health").check()
========================================================================
  - ERROR: flake8: the command "flake8" is not executable.
  - OK: shellcheck: the command "shellcheck" is executable.
  - ERROR: codespell: the command "codespell" is not executable.
#+end_example

* Vim/Neovim
#+NAME: Vim/Neovim
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes

yay lua-language-server
npm install -g typescript-language-server typescript
yay tree-sitter                 #  An incremental parsing system for programming tools
yay prettierd                   #  prettier, as a daemon, for ludicrous formatting speed.
yay eslint_d                    # Makes eslint the fastest linter on the planet.
yay stylua                      # Integrates with weleimp/stylua.nvim
sudo dnf install ShellCheck     # Provides shellcheck command for shell script anlaysis tool
sudo dnf install gcc-c++        # C++ support for GCC
sudo dnf install shc             # Shell script compiler
yay lazygit
sudo dnf copr enable atim/lazygit -y
sudo dnf install lazygit
#
# Distrubution - https://github.com/NTBBloodbath/doom-nvim
#
bash <(curl -s https://raw.githubusercontent.com/NTBBloodbath/doom-nvim/main/tools/install.sh)
#
# LunarVim
#
bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh)
#
# NvChad
#
docker run -w /root -it --rm alpine:edge sh -uelic '
  apk add git nodejs neovim ripgrep alpine-sdk --update
  git clone https://github.com/NvChad/NvChad ~/.config/nvim
  nvim
'
git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1 && nvim
#+end_src

* Utilities
#+NAME: Utilities
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#
# disk analyzer with ncurses interface
yay ncdu
cargo install --locked code-minimap
# lf aur/lf Ranger in Go-lang - Option 98 in yay.,. first in aur
sudo dnf install btop htop
# Simple X Hot Key Daemon.
yay sxhkd                       # You can remap individual keys with Xmodmap quite easily, but not arbitrary combinations of keys.

# OTHER YAY
yay git-delta
yay macchina-bin
yay procs
yay hyperfine

yay thefuck
sudo pacman -S ack
sudo pacman -S fd
sudo dnf install fd-find
sudo dnf install xclip # X11 clipboard manipulation tool, similar to `xsel`. Handles the X primary and secondary selections, plus the system clipboard (`Ctrl + C`/`Ctrl + V`).
sudo dnf install entr           # Run arbitrary commands when files change
sudo dnf install cronie         # Run arbitrary commands when files change
cronie                          # Cron daemon for executing programs at set times
cronie-anacron                  #   Utility for running regular jobs
crontabs                        # Root crontab files used to schedule the execution of programs

#+end_src

* Databases
#+NAME: Databases
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#

sudo dnf install sqlite

#+end_src

* Rust tools
#+NAME: Rust tools
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#
# rust tools
yay lf
yay ripgrep
yay zoxide                      # A smarter cd command
yay exa # 10 - ls replacement
yay bat
sudo dnf install rust_ledger
cargo install sd nu # sd like sed. nu(shell)
cargo install just  # save and run project commands. like `make`.
cargo install kondo kondo-cli # kondo like npxkill for different large files dependencies.
cargo install --locked zellij   # tmux

#+end_src

* Go lang
#+NAME: Go lang
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#
# Go lang
## Sampler:  Tool for shell commands execution, visualization and alerting.
sudo wget https://github.com/sqshq/sampler/releases/download/v1.1.0/sampler-1.1.0-linux-amd64 -O /usr/local/bin/sampler
sudo chmod +x /usr/local/bin/sampler # Please specify config file using --config flag. Example: sampler --config example.yml
### OR (FEDORA)
sudo dnf install golang-github-sqshq-sampler

#+end_src

* LSP
#+NAME: LSP
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#

# codespell-2.1.0-4.fc36.noarch  Fix common misspellings in text files
sudo dnf install codespell # For null-ls neovim
sudo dnf install python3-flake8 # For null-ls neovim


#+end_src

* VS Code
#+NAME: VS Code
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#

# VSCODE -- https://code.visualstudio.com/docs/setup/linux#_rhel-fedora-and-centos-based-distributions
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
dnf check-update
sudo dnf install code

#+end_src

* Browsers
#+NAME: Browsers
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#
# BROWSER
# Qutebrowser & dependency
yay qutebrowser
yay python-adblock
yay asciidoc
sudo dnf install qt5-qtwebengine-freeworld   # RPM Fusion - codecs to play videos
# yay python-pygments # for :view-source syntax highlighting

#+end_src

* Fonts
#+NAME: Fonts
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#
yay nerd-fonts-complete         # aur but conflicts with ttf-nerd-fonts-symbols
yay powerline-fonts-git
yay fontmatrix
yay powerline-fonts
yay powerline-common
yay xorg-xlsfonts

#+end_src

* Shell Terminals Extras
#+NAME: Shell Terminals Extras
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#
# terminal
yay wezterm kitty alacritty

# starship setup
starship init bash
starship init fish
starship init zsh
mkdir ~/.config/starship/ && touch ~/.config/starship/starship.toml
export STARSHIP_CONFIG=~/.config/starship/starship.toml

yay mcfly
echo "source /usr/share/doc/mcfly/mcfly.bash" >> .bashrc

# Shell Prompt
yay starship

# Navi & dependencies
yay navi # man-page alternative in Rust
yay fzf
yay skim

# REPL
yay evcxr                       # a RUST based repl based on evcxr

# ASCII
# live ascii bonsai tree animation @chonsai
yay cbonsai
yay rmatrix


#+end_src

* NODE
#+NAME: NODE
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#
# fast Node Version Manager
yay fnm-bin
eval "$(fnm env)"               # source the shell instead of restarting terminal
fnm install --lts               # Install latest node version -- $ node $ .exit
# YARN
sudo dnf install yarnpkg        # Fast, reliable, and secure dependency management.
sudo yarn global add create-vite # then use create-vite my-app

#+end_src

* YAY Extras
#+NAME: YAY Extras
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#
# wallppaper theme
yay python-pywal
yay redshift

# feature rich ncurses-based music player
yay cmus

#
# PARU
#
# Install paru, like yay
yay paru

# wallpapers
paru -S nordic-wallpapers

# FONTS
sudo pacman -S ttf-dejavu ttf-liberation ttf-droid ttf-ubuntu-font-family noto-fonts
yay -S ttf-gelasio-ib ttf-caladea ttf-carlito ttf-liberation-sans-narrow ttf-ms-fonts
# Essential for starship glyphs emoji etc
yay noto-fonts-emoji noto-fonts-extra
# sudo pacman -S ttf-font-awesome-4

#+end_src

* EMACS
#+NAME: EMACS
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
#------------------------------------------------------------------------------------------------------#

yay emacs
# Doom Emacs
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
   ~/.emacs.d/bin/doom install
# source .bashrc # after adding to ./bashrc >> export PATH="$HOME/.emacs.d/bin:$PATH"
doom sync

#+END_SRC

* C Libraries
#+NAME: C Libraries
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
sudo dnf install clang
#+END_SRC
** Packages installed
 - clang-14.0.5-1.fc36.x86_64     A C language family front-end for LLVM
 - clang-libs-14.0.5-1.fc36.x86_64        Runtime library for clang
 - clang-resource-filesystem-14.0.5-1.fc36.x86_64 Filesystem package that owns the clang resource directory
 - compiler-rt-14.0.5-1.fc36.x86_64       LLVM "compiler-rt" runtime libraries
 - libomp-14.0.5-1.fc36.x86_64    OpenMP runtime for clang
 - libomp-devel-14.0.5-1.fc36.x86_64      OpenMP header files
 - llvm-14.0.5-1.fc36.x86_64      The Low Level Virtual Machine

** SDL2
NOTE: Using it for chip8 emulation.
https://github.com/libsdl-org/SDL
- Simple DirectMedia Layer is a cross-platform development library designed to provide
  low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.
- It is used by video playback software, emulators, and popular games including Valve's
  award winning catalog and many Humble Bundle games.

#+NAME: C Libraries/SDL2
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
sudo dnf install SDL2{,_image,_mixer,_ttf,_gfx}-devel
#+END_SRC

*** Packages Summary
 Package                                        Architecture                      Version                                      Repository                          Size

Installing:
 SDL2-devel                                     x86_64                            2.24.0-1.fc36                                updates                            364 k
 SDL2_gfx-devel                                 x86_64                            1.0.4-7.fc36                                 fedora                              17 k
 SDL2_image-devel                               x86_64                            2.0.5-8.fc36                                 fedora                              11 k
 SDL2_mixer-devel                               x86_64                            2.0.4-10.fc36                                fedora                              18 k
 SDL2_ttf-devel                                 x86_64                            2.0.18-2.fc36                                fedora                              12 k
Installing dependencies:
 SDL2_gfx                                       x86_64                            1.0.4-7.fc36                                 fedora                              40 k
 SDL2_mixer                                     x86_64                            2.0.4-10.fc36                                fedora                              82 k
 SDL2_ttf                                       x86_64                            2.0.18-2.fc36                                fedora                              39 k
 libglvnd-core-devel                            x86_64                            1:1.4.0-4.fc36                               updates                             17 k
 libglvnd-devel                                 x86_64                            1:1.4.0-4.fc36                               updates                            155 k
 mesa-libEGL-devel                              x86_64                            22.1.7-1.fc36                                updates                             19 k

Install  11 Packages

Total download size: 774 k
Installed size: 5.1 M

* robotgo
** Fedora
#+NAME: robotgo/Fedora
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
sudo dnf install libXtst-devel

# Bitmap
sudo dnf install libpng-devel

# Hook
sudo dnf install libxkbcommon-devel libxkbcommon-x11-devel xorg-x11-xkb-utils-devel
sudo dnf install libxkbcommon-x11-devel

# Clipboard
sudo dnf install xsel xclip

# Install package 'xorg-x11-server-Xvfb' to provide command 'xvfb-run'? [N/y] y
# For gohooks load_input_helper [1883]: XkbGetKeyboard failed to locate a valid keyboard!
# Run COMMAND (usually an X client) in a virtual X server environment.
sudo dnf install xorg-x11-server-Xvfb
#+end_src

* Formatters
** shfmt
**shfmt** formats shell programs. If the only argument is a dash (1m-22m) or no arguments are given, standard input will be used.

#+NAME: Formatters/shfmt
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
sudo dnf install shfmt
#+end_src

If a given path is a directory, all shell scripts found under that directory will be used.
* Go Tools Environment
** Debugging
#+NAME: Go Tools Environment/Debugging
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
# Installing 6 tools at /$HOME/go/bin in module mode.
# gotests # gomodifytags # impl # goplay # dlv # staticchec
go get github.com/cweill/gotests/gotests@latest
go get github.com/fatih/gomodifytags@latest
go get github.com/josharian/impl@latest
go get github.com/haya14busa/goplay/cmd/goplay@latest
go get github.com/go-delve/delve/cmd/dlv@latest
go get honnef.co/go/tools/cmd/staticcheck@latest
#+end_src
* GNU
** gnuplot
Installed:
  dejavu-sans-fonts-2.37-18.fc36.noarch  gnuplot-5.4.3-3.fc36.x86_64
  gnuplot-common-5.4.3-3.fc36.x86_64     libcerf-2.1-1.fc36.x86_64
#+NAME: GNU/gnuplot
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
sudo dnf install gnuplot
#+END_SRC
* cheatsheets
** cheat
cheat-community-cheatsheets
#+NAME: cheatsheets/cheat
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
sudo dnf install cheat

#+END_SRC

** Examples only
#+begin_src shell
Examples:
  To initialize a config file:
    mkdir -p ~/.config/cheat && cheat --init > ~/.config/cheat/conf.yml

  To view the tar cheatsheet:
    cheat tar

  To edit (or create) the foo cheatsheet:
    cheat -e foo

  To edit (or create) the foo/bar cheatsheet on the "work" cheatpath:
    cheat -p work -e foo/bar

  To view all cheatsheet directories:
    cheat -d

  To list all available cheatsheets:
    cheat -l

  To list all cheatsheets whose titles match "apt":
    cheat -l apt

  To list all tags in use:
    cheat -T

  To list available cheatsheets that are tagged as "personal":
    cheat -l -t personal

  To search for "ssh" among all cheatsheets, and colorize matches:
    cheat -c -s ssh

  To search (by regex) for cheatsheets that contain an IP address:
    cheat -c -r -s '(?:[0-9]{1,3}\.){3}[0-9]{1,3}'

  To remove (delete) the foo/bar cheatsheet:
    cheat --rm foo/bar
#+end_src
* Docker
  ** Installation
#+NAME: Docker/installation
#+BEGIN_SRC shell :tangle install-pkg.sh :main no :comments link :noweb yes
sudo dnf install cheat

sudo dnf -y install dnf-plugins-core
sudo dnf config-manager \
--add-repo \
https://download.docker.com/linux/fedora/docker-ce.repo
sudo dnf install docker-ce docker-ce-cli containerd.io docker-compose-plugin
dnf list docker-ce --showduplicates | sort -r
sudo systemctl start docker # Start docker post installation.
sudo docker run hello-world # Verify that Docker Engine is installed right.
#+END_SRC
sudo dnf install ./docker-desktop-4.12.0-x86_64.rpm
systemctl --user start docker-desktop .config/install-pkg.sh
sudo dnf install nasm
sudo dnf install gv
sudo dnf copr enable varlad/helix
sudo dnf install helix
cargo install rust_cli
sudo dnf install sqlitebrowser

* PostgreSQL
sudo yum install pgadmin4
sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/F-36-x86_64/pgdg-fedora-repo-latest.noarch.rpm
sudo dnf install -y postgresql15-server
sudo /usr/pgsql-15/bin/postgresql-15-setup initdb
sudo systemctl enable postgresql-15
sudo systemctl start postgresql-15

** https://www.if-not-true-then-false.com/2012/install-postgresql-on-fedora-centos-red-hat-rhel/
*** 1. Install PostgreSQL 14 Database Server on Fedora 35/34/33, CentOS/Red Hat (RHEL)/Rocky Linux 8.5
sudo mkdir /var/lib/pgsql
sudo chown whatami /var/lib/pgsql
initdb --pgdata=/var/lib/pgsql/

initdb: warning: enabling trust authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.

Success. You can now start the database server using:

    pg_ctl -D /var/lib/pgsql/ -l logfile start

*** 2. Configure PostreSQL 14
**** 2. Open /var/lib/pgsql/14/data/postgresql.conf file, and add/uncomment/modify following:

listen_addresses = '*'
port = 5432

If you want just localhost setup, then use following:

listen_addresses = 'localhost'
port = 5432

Or if you want use specific ip, then use following:

listen_addresses = '192.1.2.33'
port = 5432

